name: Build

on:
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  packages: write
  issues: write

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_SCRIPT: diy-part.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Canada/Atlantic
  FILE_NAME: IPQ53xx-BE3600

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: INIT Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /opt/ghc /usr/local/lib/android 2>/dev/null
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E apt-get -y install rename
        sudo -E apt-get -y install time
        sudo -E apt-get -y install gn
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"
        # 清理并重建工作目录
        sudo rm -rf /workdir
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        df -Th

    - name: Cache OpenWrt
      uses: actions/cache@v3
      with:
        path: |
          /workdir/openwrt/dl
          /workdir/openwrt/build_dir/host
        key: openwrt-${{ runner.os }}-${{ hashFiles('.config') }}
        restore-keys: |
          openwrt-${{ runner.os }}
      continue-on-error: true

    - name: CGit Repository
      working-directory: /workdir
      run: |
        df -hT $PWD
        # 清理已存在的目录
        if [ -d "openwrt" ]; then
          echo "发现已存在的openwrt目录，正在清理..."
          rm -rf openwrt
        fi
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Install Feeds
      run: |
        cd openwrt
        # 更新官方feeds
        ./scripts/feeds update -a
        # 更新feeds.conf.default (来自diy-part.sh)
        $GITHUB_WORKSPACE/$DIY_SCRIPT
        # 再次更新feeds以包含新添加的源
        ./scripts/feeds update -a
        # 安装所有包
        ./scripts/feeds install -a
        # 强制重新安装可能冲突的包
        ./scripts/feeds uninstall -a luci-app-ssr-plus luci-app-passwall luci-app-openclash
        ./scripts/feeds install -p kenzo luci-app-ssr-plus luci-app-passwall luci-app-openclash
        ./scripts/feeds install -a

    - name: Custom Config
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SCRIPT
        ls -la $DIY_SCRIPT  # 确认权限已修改
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_SCRIPT || {
          echo "执行DIY脚本失败，检查错误..."
          cat $GITHUB_WORKSPACE/$DIY_SCRIPT
          echo "尝试在当前目录执行..."
          cp $GITHUB_WORKSPACE/$DIY_SCRIPT ./
          chmod +x ./$DIY_SCRIPT
          ./$DIY_SCRIPT
        }

    - name: Download DL
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Packages
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
      continue-on-error: true
      
    - name: Analyze Compile Results
      run: |
        echo "分析编译结果:"
        echo "检查.config文件中的设备目标配置:"
        grep -E "^CONFIG_TARGET_.*=y" openwrt/.config || echo "没有找到目标设备配置"
        
        echo "检查IPQ5312相关配置:"
        grep -E "CONFIG_.*IPQ53.*" openwrt/.config || echo "没有找到IPQ53相关配置"
        
        echo "检查编译生成的文件:"
        find openwrt/bin -type f 2>/dev/null | sort || echo "没有生成bin目录或文件"
        
        echo "检查是否有编译错误日志:"
        find openwrt/logs -type f 2>/dev/null | head -5 || echo "没有找到日志文件"
        
        if [ -d "openwrt/logs" ]; then
          grep -l "Error" openwrt/logs/* 2>/dev/null | head -5 || echo "日志中未发现Error关键字"
        fi

    - name: Check Space Usage
      if: (!cancelled())
      run: df -hT

    - name: Debug Info
      run: |
        echo "固件目录信息:"
        ls -la || echo "当前目录无法访问"
        ls -la openwrt || echo "openwrt目录不存在"
        ls -la openwrt/bin || echo "bin目录不存在"
        echo "查找所有可能的固件文件:"
        find . -name "*.bin" -o -name "*.img" -o -name "*.gz" 2>/dev/null | grep -v "build_dir" || echo "未找到任何固件文件"
      continue-on-error: true

    - name: Organize Files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        echo "===== 开始整理固件文件 ====="
        mkdir -p output
        # 尝试找到任何生成的固件文件
        if [ -d "openwrt/bin" ]; then
          echo "√ 找到bin目录，复制内容到输出目录"
          mkdir -p output/bin
          cp -r openwrt/bin output/ || echo "! 复制bin目录失败"
          echo "√ 成功复制内容到output/bin/"
        else
          echo "! openwrt/bin目录不存在"
        fi
        
        # 确保有文件可供发布
        if [ ! "$(find output -type f 2>/dev/null)" ]; then
          echo "! 未找到任何固件文件，创建dummy文件"
          mkdir -p output/dummy
          echo "This is a placeholder file. No firmware was built successfully." > output/dummy/placeholder.txt
          echo "√ 创建了占位文件output/dummy/placeholder.txt"
        fi
        
        echo "===== 输出目录内容 ====="
        find output -type f | sort || echo "! 输出目录没有任何文件"
        
        echo "FIRMWARE=$(pwd)/output" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        echo "===== 文件整理完成 ====="
      continue-on-error: true

    - name: Upload Artifact
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}/**/*

    - name: Push Tag
      id: tag
      run: |
        TIME=$(date +"%Y%m%d%H%M")
        echo "release_tag=$TIME" >> $GITHUB_OUTPUT
        echo "生成的TAG: $TIME"
      continue-on-error: true

    - name: Upload Files
      id: release
      uses: ncipollo/release-action@v1
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.FILE_NAME }}
        allowUpdates: true
        tag: ${{ steps.tag.outputs.release_tag || github.run_id }}
        commit: ${{ github.sha }}
        token: ${{ secrets.RELEASE_TOKEN || github.token }}
        body: |
          GL.iNet BE3600 (IPQ5312) OpenWrt固件
          构建时间: ${{ env.FILE_DATE }}
          
          ### 硬件规格
          - CPU: IPQ5312 (4核A53@1.1GHz, 1 NPU@1.0GHz)
          - RAM: 256MB
          - Flash: 128MB
          
          ### 特性支持
          - Wi-Fi: 2.4GHz + 5GHz
          - 有线网络: 5个千兆端口
          - 2.5G PHY: YT8821C
          
          注意：如果release中只包含placeholder.txt文件，说明编译过程没有生成固件。
        artifacts: ${{ env.FIRMWARE }}/**/*
      continue-on-error: true
