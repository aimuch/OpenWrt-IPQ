name: Build IPK Packages

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: '要编译的插件名称(多个插件用空格分隔)'
        required: true
        default: 'luci-app-ssr-plus luci-app-openclash'

# 修改权限配置，确保有足够的权限创建发布
permissions: 
  contents: write  # 允许创建releases和上传文件
  packages: read
  issues: read
  pull-requests: read

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: master
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: INIT Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /opt/ghc /usr/local/lib/android 2>/dev/null
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E apt-get -y install rename time gn
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"
        # 清理并重建工作目录
        sudo rm -rf /workdir
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        df -Th

    - name: Clone Source Code
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Add Custom Feeds
      run: |
        cd openwrt
        # 添加插件源
        echo "添加kenzok8的插件源，包含SSR Plus、PassWall、OpenClash等..."
        echo "src-git kenzo https://github.com/kenzok8/openwrt-packages" >> feeds.conf.default
        echo "src-git small https://github.com/kenzok8/small" >> feeds.conf.default
        cat feeds.conf.default

    - name: Update Feeds
      run: |
        cd openwrt
        # 更新并安装feeds
        echo "更新feeds..."
        ./scripts/feeds update -a
        echo "安装feeds..."
        ./scripts/feeds install -a
        # 确保关键包能被找到
        echo "检查关键包是否可用:"
        for pkg in ${{ github.event.inputs.package_name }}; do
          if [ -d "package/feeds/kenzo/$pkg" ]; then
            echo "✓ $pkg 已找到 (kenzo)"
          elif [ -d "package/feeds/packages/$pkg" ]; then
            echo "✓ $pkg 已找到 (packages)"
          else
            echo "⚠️ 警告: $pkg 未找到"
          fi
        done

    - name: Fix Package Versions
      run: |
        cd openwrt
        echo "修复依赖包版本问题..."
        # 找到并修改lua-neturl包的Makefile
        if [ -f "feeds/small/lua-neturl/Makefile" ]; then
          echo "找到lua-neturl Makefile，修复版本号格式..."
          # 备份原始文件
          cp feeds/small/lua-neturl/Makefile feeds/small/lua-neturl/Makefile.bak
          # 修改版本号格式 - 移除最后的-r3部分
          sed -i 's/PKG_RELEASE:=.*/PKG_RELEASE:=1/' feeds/small/lua-neturl/Makefile
          # 显示修改后的内容
          echo "修改后的版本内容:"
          grep -A 3 "PKG_VERSION" feeds/small/lua-neturl/Makefile
        else
          echo "未找到lua-neturl Makefile，尝试其他方法..."
          # 尝试查找所有可能的依赖包Makefile
          find feeds/small/ -name "Makefile" -exec grep -l "PKG_RELEASE" {} \; | xargs -I {} echo "检查: {}"
        fi
        
        # 修复naiveproxy编译问题
        if [ -f "feeds/small/naiveproxy/Makefile" ]; then
          echo "找到naiveproxy Makefile，检查并修复潜在问题..."
          # 备份原始文件
          cp feeds/small/naiveproxy/Makefile feeds/small/naiveproxy/Makefile.bak
          
          # 检查并显示naiveproxy的关键信息
          echo "naiveproxy版本信息:"
          grep -E 'PKG_VERSION|PKG_SOURCE|PKG_BUILD_DEPENDS' feeds/small/naiveproxy/Makefile
          
          # 查看naiveproxy依赖信息
          echo "naiveproxy依赖情况:"
          grep -A 10 "DEPENDS" feeds/small/naiveproxy/Makefile
          
          # 确保软件包依赖满足
          echo "安装编译naiveproxy所需的系统依赖..."
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip ninja-build nodejs
          python3 -m pip install urllib3==1.26.15
          
          # 显示系统环境信息
          echo "当前系统环境信息:"
          uname -a
          gcc --version
          python3 --version
          node --version
          npm --version
        else
          echo "未找到naiveproxy Makefile"
        fi

    - name: Generate Minimal Config
      run: |
        cd openwrt
        cat > .config <<EOF
        CONFIG_MODULES=y
        CONFIG_HAVE_DOT_CONFIG=y
        CONFIG_TARGET_ipq53xx=y
        CONFIG_TARGET_ipq53xx_generic=y
        CONFIG_TARGET_ipq53xx_generic_DEVICE_glinet_gl-be3600=y
        CONFIG_HAS_SUBTARGETS=y
        CONFIG_HAS_DEVICES=y
        CONFIG_TARGET_BOARD="ipq53xx"
        CONFIG_TARGET_SUBTARGET="generic"
        CONFIG_TARGET_PROFILE="DEVICE_glinet_gl-be3600"
        CONFIG_TARGET_ARCH_PACKAGES="aarch64_cortex-a53"
        CONFIG_DEFAULT_TARGET_OPTIMIZATION="-Os -pipe -mcpu=cortex-a53"
        CONFIG_CPU_TYPE="cortex-a53"
        CONFIG_SDK=y
        CONFIG_MAKE_TOOLCHAIN=y
        EOF
        
        # 添加用户指定的包
        for pkg in ${{ github.event.inputs.package_name }}; do
          echo "CONFIG_PACKAGE_$pkg=y" >> .config
        done
        
        make defconfig

    - name: Download Package Sources
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build Packages
      id: compile
      run: |
        cd openwrt
        echo "开始编译指定的插件包..."
        
        # 显示指定的包名
        echo "尝试编译的包: ${{ github.event.inputs.package_name }}"
        
        # 确保所有依赖都已安装
        make defconfig
        
        # 编译基本工具链
        echo "编译基础工具链..."
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        make target/compile -j$(nproc) || make target/compile -j1 V=s
        make package/libs/toolchain/compile -j$(nproc) || make package/libs/toolchain/compile -j1 V=s
        
        # 创建一个问题包列表
        problem_packages="lua-neturl naiveproxy"
        
        # 编译所有输入的包
        for pkg in ${{ github.event.inputs.package_name }}; do
          echo "编译 $pkg..."
          # 处理问题依赖包
          if [[ "$pkg" == "luci-app-ssr-plus" ]] || [[ "$pkg" == "luci-app-passwall" ]]; then
            echo "针对需要特殊处理的包使用特殊编译方式..."
            # 先处理有问题的依赖包
            for prob_pkg in $problem_packages; do
              echo "绕过问题包 $prob_pkg..."
              # 在feeds的Makefile中禁用问题包
              feeds_path=$(find ./package/feeds -name "$prob_pkg" -type d)
              if [ -n "$feeds_path" ]; then
                echo "找到并处理 $feeds_path..."
                touch $feeds_path/.built
                mkdir -p $feeds_path/ipkg-build/
                touch $feeds_path/ipkg-build/.built
                echo "已经跳过编译 $prob_pkg"
              fi
            done
          fi
          
          # 检查包是否存在
          echo "检查包 $pkg 是否存在..."
          if [ -d "package/feeds/kenzo/$pkg" ]; then
            pkg_path="package/feeds/kenzo/$pkg"
          elif [ -d "package/feeds/packages/$pkg" ]; then
            pkg_path="package/feeds/packages/$pkg"
          elif [ -d "package/feeds/small/$pkg" ]; then
            pkg_path="package/feeds/small/$pkg"
          else
            # 查找包的确切位置
            pkg_path=$(find package/feeds -name "$pkg" -type d | head -n 1)
            if [ -z "$pkg_path" ]; then
              echo "警告: 无法找到包 $pkg，尝试编译但可能失败"
              pkg_path="package/$pkg"
            fi
          fi
          
          echo "使用路径 $pkg_path 编译 $pkg..."
          
          # 确保包的配置被设置为编译
          echo "确保包被选中编译..."
          ./scripts/feeds uninstall $pkg || true
          ./scripts/feeds install $pkg || true
          
          # 更新编译菜单配置以确保包被选中
          cat >> .config <<EOF
          CONFIG_PACKAGE_$pkg=y
          EOF
          make defconfig
          
          # 使用IGNORE_ERRORS=1尝试编译，即使有错误也继续
          echo "正在编译 $pkg，使用多线程..."
          make $pkg_path/compile IGNORE_ERRORS=1 -j$(nproc) V=s || {
            echo "多线程编译失败，尝试使用单线程编译..."
            make $pkg_path/compile IGNORE_ERRORS=1 -j1 V=s || {
              echo "单线程编译也失败了，尝试直接编译包..."
              make package/$pkg/compile IGNORE_ERRORS=1 -j1 V=s || {
                echo "所有编译方法都失败了，记录错误但继续..."
                echo "$pkg 编译失败" >> /tmp/failed_packages.txt
              }
            }
          }
          
          # 尝试安装包
          echo "安装 $pkg..."
          make $pkg_path/install IGNORE_ERRORS=1 -j$(nproc) || make package/$pkg/install IGNORE_ERRORS=1 -j1 V=s || true
          
          # 检查编译是否成功
          if find bin/packages -name "*${pkg}*" -type f 2>/dev/null | grep -q .; then
            echo "✓ $pkg 编译成功，找到对应的IPK文件"
          elif find bin/targets -name "*${pkg}*" -type f 2>/dev/null | grep -q .; then
            echo "✓ $pkg 编译成功，找到对应的IPK文件"
          else
            echo "⚠️ 警告: 未找到 $pkg 的编译输出文件，尝试强制重新编译..."
            # 强制构建包文件
            make package/index V=s || true
          fi
        done
        
        # 生成包索引
        echo "生成包索引..."
        make package/index V=s || true
        
        # 显示编译失败包的列表
        if [ -f "/tmp/failed_packages.txt" ]; then
          echo "以下包编译失败:"
          cat /tmp/failed_packages.txt
        fi
        
        echo "显示所有生成的IPK文件:"
        find bin -name "*.ipk" | sort || echo "未找到任何IPK文件"
        
        echo "status=success" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Collect IPK Packages
      id: collect
      run: |
        mkdir -p ./ipk_packages
        
        echo "查看编译输出目录结构..."
        find openwrt/bin -type d | sort || echo "bin目录不存在"
        
        echo "查找所有IPK文件的位置..."
        find openwrt -name "*.ipk" | sort || echo "未找到任何IPK文件"
        
        # 首先查找所有可能的IPK文件并复制
        echo "复制所有找到的IPK文件..."
        find openwrt -name "*.ipk" -exec cp -fv {} ./ipk_packages/ \; || echo "复制IPK文件失败"
        
        # 特别检查常见的IPK文件位置
        for pkg in ${{ github.event.inputs.package_name }}; do
          echo "查找特定的包 $pkg..."
          find openwrt -name "*${pkg}*.ipk" -exec cp -fv {} ./ipk_packages/ \; || echo "未找到 $pkg 的IPK文件"
        done
        
        # 检查build_dir中是否有编译后的包
        if [ -d "openwrt/build_dir" ]; then
          echo "检查build_dir目录中的包..."
          find openwrt/build_dir -name "*.ipk" -exec cp -fv {} ./ipk_packages/ \; || echo "build_dir中未找到IPK文件"
        fi
        
        # 查找各个feeds下的编译结果
        for feed in kenzo small packages; do
          echo "检查 $feed feed的编译结果..."
          find openwrt/build_dir/feeds/$feed -name "*.ipk" -exec cp -fv {} ./ipk_packages/ \; 2>/dev/null || echo "$feed feed中未找到IPK文件"
        done
        
        # 强制为每个请求的包创建一个包文件夹
        echo "为每个请求的包创建对应目录..."
        for pkg in ${{ github.event.inputs.package_name }}; do
          mkdir -p "./ipk_packages/${pkg}_files"
          cp -fv openwrt/bin/packages/*/${pkg}*.ipk "./ipk_packages/${pkg}_files/" 2>/dev/null || true
          cp -fv openwrt/bin/targets/*/*/packages/${pkg}*.ipk "./ipk_packages/${pkg}_files/" 2>/dev/null || true
        done
        
        # 确保总有文件可以上传
        if [ ! "$(ls -A ./ipk_packages 2>/dev/null)" ]; then
          echo "未找到任何IPK文件，创建占位文件..."
          echo "No packages were built. Please check build logs for errors." > ./ipk_packages/build_failed.txt
          
          # 保存关键构建日志
          echo "保存构建日志以便分析..."
          mkdir -p ./ipk_packages/logs
          find openwrt/logs -type f -name "*.txt" -exec cp {} ./ipk_packages/logs/ \; 2>/dev/null || true
          find openwrt -name "*.log" -exec cp {} ./ipk_packages/logs/ \; 2>/dev/null || true
        fi
        
        echo "找到以下IPK包或文件:"
        ls -la ./ipk_packages/
        
        echo "packages_path=$(pwd)/ipk_packages" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Upload IPK Packages
      uses: actions/upload-artifact@main
      if: steps.collect.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_packages_${{ github.event.inputs.package_name }}_${{ github.run_id }}
        path: ${{ env.packages_path }}

    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      if: steps.collect.outputs.status == 'success' && !cancelled()
      with:
        name: IPK Packages - ${{ github.event.inputs.package_name }}
        allowUpdates: true
        tag: packages-${{ github.run_id }}
        commit: ${{ github.sha }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          OpenWrt IPK插件包
          
          编译的插件: ${{ github.event.inputs.package_name }}
          构建时间: ${{ env.TZ }} - ${{ github.event.repository.updated_at }}
          
          注意: 如果只发现build_failed.txt文件，说明编译过程未能生成IPK包。请查看工作流日志了解详细错误信息。
        artifacts: ${{ env.packages_path }}/*
        artifactErrorsFailBuild: false
      continue-on-error: true 